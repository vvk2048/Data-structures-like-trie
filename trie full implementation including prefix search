#include <iostream>

using namespace std;

class trienode{
    public:
    trienode* child[26];
    bool isend=false;
    
    trienode()
    {for(int i=0;i<26;i++){child[i]=NULL;}
             }
};
class Trie {
public:
    /** Initialize your data structure here. */
    Trie() {
    root=new trienode();    
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        trienode* cur=root;
        int k=0;
        int s=word.length();
        for(int i=0;i<s;i++)
        {k=word[i]-'a';
            if(cur->child[k]==NULL){cur->child[k]=new trienode();}
            cur=cur->child[k];
        }
    cur->isend=true;}
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
trienode* cur=root;
        int k=0;
        int s=word.length();
        for(int i=0;i<s;i++)
        {k=word[i]-'a';
            if(cur->child[k]==NULL){return false;}
            cur=cur->child[k];
        }
    return cur->isend;    
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string word) {
trienode* cur=root;
        int k=0;
        int s=word.length();
        for(int i=0;i<s;i++)
        {k=word[i]-'a';
            if(cur->child[k]==NULL){return false;}
            cur=cur->child[k];
        }
    return true;    
        
    }
    private:
    trienode* root;
};
int main()
{Trie* obj=new Trie();
 obj->insert("vivek");
  bool param_2 = obj->search("vivek");
  bool param_3 = obj->startsWith("vv");
 cout<<param_2<<param_3;
    
}
